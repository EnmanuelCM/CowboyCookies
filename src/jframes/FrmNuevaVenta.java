package jframes;

import conexion.Conexion;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.awt.Dimension;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.DetalleVenta;

public class FrmNuevaVenta extends javax.swing.JInternalFrame {

    //Modelo de los datos
    private DefaultTableModel modeloDatosProductos;
    //Lista para ver el detalle de venta de los productos
    ArrayList<DetalleVenta> listaProductos = new ArrayList<>();
    private DetalleVenta producto;

    private int id_producto = 0;
    private String nombre = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeITBIS = 0;

    private int cantidad = 0;//Cantidad de productos a comprar
    private double subtotal = 0.0;//Cantidad por precio
    private double ITBIS = 0.0;
    private double totalPagar = 0.0;

    private int auxIdDetalle = 1;

    public FrmNuevaVenta() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");

        this.CargarComboProductos();
        this.InicializarTablaProducto();
    }

    private void InicializarTablaProducto() {
        modeloDatosProductos = new DefaultTableModel();
        //agregar columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P. Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("ITBIS");
        modeloDatosProductos.addColumn("Total Pagar");
        modeloDatosProductos.addColumn("Accion");

        //Agregar los datos del modelo a la tabla
        this.jTable_Productos.setModel(modeloDatosProductos);
    }
    
    //Metodo para presentar la informacion de la tabla DetalleVenta
    private void ListaTablaProductos(){
        this.modeloDatosProductos.setRowCount(listaProductos.size());
        for(int i = 0; i < listaProductos.size(); i++){
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getPrecio_unitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubtotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getItbis(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getTotal(), i, 6);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 7);
        }
        //Agregar al JTable
        jTable_Productos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCantidad = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblEmpleado = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbxProductos = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnAgregarProd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        txtSubtotal = new javax.swing.JTextField();
        txtITBIS = new javax.swing.JTextField();
        txtCambio = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        btnCalcularCambio = new javax.swing.JButton();
        btnRegistrarVenta = new javax.swing.JButton();
        lbl_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCantidad.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        getContentPane().add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, 70, -1));

        jLabel3.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(95, 47, 35));
        jLabel3.setText("Cantidad:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, -1, -1));

        lblEmpleado.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        lblEmpleado.setForeground(new java.awt.Color(95, 47, 35));
        lblEmpleado.setText("Empleado");
        getContentPane().add(lblEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, -1));

        jLabel1.setFont(new java.awt.Font("Montserrat", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(95, 47, 35));
        jLabel1.setText("Facturaci√≥n");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        cbxProductos.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        cbxProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:" }));
        getContentPane().add(cbxProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 270, -1));

        jLabel4.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(95, 47, 35));
        jLabel4.setText("Producto:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        btnAgregarProd.setBackground(new java.awt.Color(95, 47, 35));
        btnAgregarProd.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        btnAgregarProd.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarProd.setText("Agregar Producto");
        btnAgregarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProdActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgregarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Productos.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jTable_Productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_Productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 130, 760, 210));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jLabel5.setText("ITBIS:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        jLabel6.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jLabel6.setText("Total a pagar:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jLabel7.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jLabel7.setText("Efectivo:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        jLabel8.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jLabel8.setText("Cambio:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, -1, -1));

        jLabel9.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jLabel9.setText("Subtotal:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        txtEfectivo.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jPanel2.add(txtEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 100, -1));

        txtSubtotal.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        txtSubtotal.setEnabled(false);
        jPanel2.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 100, -1));

        txtITBIS.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        txtITBIS.setEnabled(false);
        jPanel2.add(txtITBIS, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 100, -1));

        txtCambio.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        txtCambio.setEnabled(false);
        jPanel2.add(txtCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 100, -1));

        txtTotal.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        txtTotal.setEnabled(false);
        jPanel2.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 100, -1));

        btnCalcularCambio.setBackground(new java.awt.Color(95, 47, 35));
        btnCalcularCambio.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        btnCalcularCambio.setForeground(new java.awt.Color(255, 255, 255));
        btnCalcularCambio.setText("Calcular Cambio");
        jPanel2.add(btnCalcularCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 140, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 340, 420, 220));

        btnRegistrarVenta.setBackground(new java.awt.Color(95, 47, 35));
        btnRegistrarVenta.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        btnRegistrarVenta.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarVenta.setText("Registrar Venta");
        getContentPane().add(btnRegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 150, 60));

        lbl_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/files/FondoCB 800x601.jpg"))); // NOI18N
        getContentPane().add(lbl_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProdActionPerformed

        String combo = this.cbxProductos.getSelectedItem().toString();

        //Validar que seleccione un producto
        if (combo.equalsIgnoreCase("Seleccione producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {

            //Validar que ingrese una Cantidad
            if (txtCantidad.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Ingresa la cantidad de productos");
            } else {
                //Vaildar que el usuario no ingrese datos no numericos
                boolean validacion = validar(txtCantidad.getText());
                if (validacion == true) {
                    //Validar que la cantidad sea mayor a 0
                    if (Integer.parseInt(txtCantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txtCantidad.getText());
                        //Ejecutar metodo para mostrar los productos
                        this.DatosDelProducto();
                        //Validar que la cantidad de productos seleccionados no sea mayor al Stock
                        if (cantidad <= cantidadProductoBBDD) {

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + ITBIS;

                            //Redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            ITBIS = (double) Math.round(ITBIS * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //Se crea un nuevo producto
                            producto = new DetalleVenta(auxIdDetalle,
                                    1,//idCabecera
                                    id_producto,
                                    nombre,
                                    Integer.parseInt(txtCantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    ITBIS,
                                    totalPagar                                   
                            );
                            //Agregar a la lista
                            listaProductos.add(producto);
                            auxIdDetalle++;
                            txtCantidad.setText("");//Limpiar campo
                            //Volver a cargar combo productos
                            this.CargarComboProductos();

                        } else {
                            JOptionPane.showMessageDialog(null, "la cantidad supera el Stock");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "la cantidad no puede ser cero (0), ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten datos no numericos");
                }
            }
        }
        //Llamar al metodo
        this.ListaTablaProductos();
    }//GEN-LAST:event_btnAgregarProdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProd;
    private javax.swing.JButton btnCalcularCambio;
    private javax.swing.JButton btnRegistrarVenta;
    private javax.swing.JComboBox<String> cbxProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Productos;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lbl_wallpaper;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtITBIS;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

//combobox Productos
    private void CargarComboProductos() {
        Conexion con = new Conexion();
        Connection cn = con.getConnection();
        String sql = "select * from productos";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cbxProductos.removeAllItems();
            cbxProductos.addItem("Seleccione producto:");
            while (rs.next()) {
                cbxProductos.addItem(rs.getString("nombre"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar productos" + e);
        }
    }

    //Metodo para que el usuario no ingrese datos no numericos
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo para mostrar los datos del producto seleccionado
    private void DatosDelProducto() {
        try {
            String sql = "select * from productos where nombre = '" + this.cbxProductos.getSelectedItem() + "'";
            Connection cn = Conexion.getConnection();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                id_producto = rs.getInt("id_producto");
                nombre = rs.getString("nombre");
                cantidadProductoBBDD = rs.getInt("stock");
                precioUnitario = rs.getDouble("precio");
                porcentajeITBIS = rs.getInt("porcentajeitbis");
                this.CalcularITBIS(precioUnitario, porcentajeITBIS);
            }

        } catch (SQLException e) {

        }
    }

    //Metodo para calcular itbis
    private double CalcularITBIS(double precio, int porcentajeITBIS) {
        int p_itbis = porcentajeITBIS;

        switch (p_itbis) {

            case 0:
                ITBIS = 0.0;
                break;
            case 8:
                ITBIS = (precio * cantidad) * 0.8;
                break;
            case 10:
                ITBIS = (precio * cantidad) * 0.10;
                break;
            case 16:
                ITBIS = (precio * cantidad) * 0.16;
                break;
            case 18:
                ITBIS = (precio * cantidad) * 0.18;
                break;
        }
        return ITBIS;
    }

}
